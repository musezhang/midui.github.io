<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[使用hexo-blog-encrypt-完成博文加密]]></title>
      <url>/2018/03/18/hexo-encrypt/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">The password is 123456</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些需要禁用的PHP危险函数]]></title>
      <url>/2018/03/06/some-dangerous-functions-in-php/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>本文说明了一些在php中需要禁用的函数，这些函数可能会引起服务器问题，造成不必要的麻烦。</p>
</blockquote>
<a id="more"></a>
<h2 id="有哪些？"><a href="#有哪些？" class="headerlink" title="有哪些？"></a>有哪些？</h2><ol>
<li><p><strong>phpinfo()</strong><br>功能描述：输出 PHP 环境信息以及相关的模块、WEB 环境等信息。<br>危险等级：<font color="orange">中</font></p>
</li>
<li><p><strong>passthru()</strong><br>功能描述：允许执行一个外部程序并回显输出，类似于 exec()。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>exec()</strong><br>功能描述：允许执行一个外部程序（如 UNIX Shell 或 CMD 命令等）。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>system()</strong><br>功能描述：允许执行一个外部程序并回显输出，类似于 passthru()。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>chroot()</strong><br>功能描述：可改变当前 PHP 进程的工作根目录，仅当系统支持 CLI 模式,PHP 时才能工作，且该函数不适用于 Windows 系统。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>scandir()</strong><br>功能描述：列出指定路径中的文件和目录。<br>危险等级：<font color="orange">中</font></p>
</li>
<li><p><strong>chgrp()</strong><br>功能描述：改变文件或目录所属的用户组。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>chown()</strong><br>功能描述：改变文件或目录的所有者。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>shell_exec()</strong><br>功能描述：通过 Shell 执行命令，并将执行结果作为字符串返回。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>proc_open()</strong><br>功能描述：执行一个命令并打开文件指针用于读取以及写入。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>proc_get_status()</strong><br>功能描述：获取使用 proc_open() 所打开进程的信息。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>error_log()</strong><br>功能描述：将错误信息发送到指定位置（文件）。<br>安全备注：在某些版本的 PHP 中，可使用 error_log() 绕过 PHP safe mode，执行任意命令。<br>危险等级：<font color="yellow">低</font></p>
</li>
<li><p><strong>ini_alter()</strong><br>功能描述：是 ini_set() 函数的一个别名函数，功能与 ini_set() 相同。具体参见 ini_set()。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>ini_set()</strong><br>功能描述：可用于修改、设置 PHP 环境配置参数。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>ini_restore()</strong><br>功能描述：可用于恢复 PHP 环境配置参数到其初始值。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>dl()</strong><br>功能描述：在 PHP 进行运行过程当中（而非启动时）加载一个 PHP 外部模块。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>pfsockopen()</strong><br>功能描述：建立一个 Internet 或 UNIX 域的 socket 持久连接。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>syslog()</strong><br>功能描述：可调用 UNIX 系统的系统层 syslog() 函数。<br>危险等级：<font color="orange">中</font></p>
</li>
<li><p><strong>readlink()</strong><br>功能描述：返回符号连接指向的目标文件内容。<br>危险等级：<font color="orange">中</font></p>
</li>
<li><p><strong>symlink()</strong><br>功能描述：在 UNIX 系统中建立一个符号链接。<br>危险等级：<font color="red">高</font></p>
</li>
<li><p><strong>popen()</strong><br>功能描述：可通过 popen() 的参数传递一条命令，并对 popen() 所打开的文件进行执行。<br>危险等级: <font color="red">高</font></p>
</li>
<li><p><strong>stream_socket_server()</strong><br>功能描述：建立一个 Internet 或 UNIX 服务器连接。<br>危险等级：<font color="orange">中</font></p>
</li>
<li><p><strong>putenv()</strong><br>功能描述：用于在 PHP 运行时改变系统字符集环境。在低于 5.2.6 版本的 PHP 中，可利用该函数修改系统字符集环境后，利用 sendmail 指令发送特殊参数执行系统 SHELL 命令。<br>危险等级：<font color="red">高</font></p>
</li>
</ol>
<h2 id="禁用方法"><a href="#禁用方法" class="headerlink" title="禁用方法"></a>禁用方法</h2><ol>
<li>打开/etc/php.ini文件，</li>
<li>查找到 disable_functions ，添加需禁用的函数名，如下：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpinfo,<span class="keyword">eval</span>,passthru,<span class="keyword">exec</span>,<span class="keyword">system</span>,<span class="keyword">chroot</span>,scandir,chgrp,<span class="keyword">chown</span>,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,<span class="keyword">readlink</span>,<span class="keyword">symlink</span>,popepassthru,stream_socket_server,fsocket,fsockopen</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 程序语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译文】mysql8.0:退出对查询缓存的支持]]></title>
      <url>/2017/10/20/mysql-8-0-retiring-support-for-the-query-cache/</url>
      <content type="html"><![CDATA[<p><strong><em>原文链接：<a href="http://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/" target="_blank" rel="external">http://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/</a></em></strong></p>
<p><strong><em>Author:Morgan Tocker(the Product Manager for the MySQL Server)</em></strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正如Rene昨天在<a href="http://proxysql.com/blog/scaling-with-proxysql-query-cache" target="_blank" rel="external">ProxySQL</a>博客上写道：</p>
<blockquote>
<p>尽管MySQL查询缓存旨在提高性能，但它具有严重的可扩展性问题，并且很容易成为严重的瓶颈。</p>
</blockquote>
<p>这确实是我们在MySQL团队观察一段时间后得到的结论。在我们了解今天的文章之前，让我先来介绍一下查询缓存。<br><a id="more"></a></p>
<h2 id="查询缓存简介"><a href="#查询缓存简介" class="headerlink" title="查询缓存简介"></a>查询缓存简介</h2><p>MySQL查询缓存是查询结果缓存。他会将以<strong>SEL</strong>开头的查询语句与一个散列表进行比较，如果有匹配则返回上一次执行查询的结果。这里还有一些限制：</p>
<ul>
<li>查询必须匹配字节级的匹配（查询缓存避免解析）</li>
<li>使用<a href="https://dev.mysql.com/doc/refman/5.7/en/query-cache-operation.html" target="_blank" rel="external">非确定性特征</a>将导致查询不被缓存（包括临时表，用户变量，RAND（），NOW（）和UDF））</li>
<li>查询缓存旨在不提供过时的结果。对基础表的任何修改都会导致所有缓存对于这些表无效。</li>
<li>如果缓存用在InnoDB引擎中，会有一些限制（对于MVCC，因为您打开了一个事务，“缓存”可能不会得到用户预期中的数据）</li>
</ul>
<h2 id="最佳案例"><a href="#最佳案例" class="headerlink" title="最佳案例"></a>最佳案例</h2><p>正如我几年前在个人博客上写的：</p>
<blockquote>
<p>查询缓存的理想使用场景往往在很大程度上是只读的，这个场景下，通过非常大的代价去检查数百万行数据，但是指返回很少的结果 一个假设出的例子是可能有一个复杂的查询来得到一个网页上的表单中的下拉列表的值，在这种情况下，查询缓存可以掩盖由于缺少的索引引起的查询性能问题，这对新手用户有帮助。</p>
</blockquote>
<p>这个观点在今天仍然适用，但是我认为重要的是还要指出，我们现在已经有很多DBA工具的对这些性能有所改善：</p>
<ul>
<li>在MySQL服务器中，我们现在可以重写查询以插入提示（或通过其他修改来提高性能）</li>
<li>我们有如ProxySQL这样的第三方工具，可以充当中间人查询缓存。 ProxySQL还支持缓存的TTL，它在我之前提供的示例中可以正常工作（构建下拉列表的值列表）。</li>
</ul>
<h2 id="查询缓存的限制"><a href="#查询缓存的限制" class="headerlink" title="查询缓存的限制"></a>查询缓存的限制</h2><p>自从MySQL 5.6（2013）以来，查询缓存已被禁用，因为它已知在多核机器上不能与高吞吐量工作负载的规模相比较。 Rene昨天在他的帖子中证实了这一点，而且这个问题之前也曾被<a href="https://www.flamingspork.com/blog/2014/06/05/performance-impact-of-mysql-query-cache-on-modern-hardware/" target="_blank" rel="external">Stewart Smith</a>和<a href="https://dom.as/tech/query-cache-tuner/" target="_blank" rel="external">Domas Mituzas</a>（更新：<a href="http://blog.koehntopp.info/index.php/1844-good-riddance-to-the-query-cache/" target="_blank" rel="external">Kristian Koehntopp</a>）提及。</p>
<p>假设可扩展性可以提高，查询缓存的限制因素在于，只有查询命中了的缓存才能看到改进; 它不太可能提高性能的可预测性。 对于面向用户的系统，降低性能的可变性通常比提高峰值吞吐量更重要：<br><img src="http://mysqlserverteam.com/wp-content/uploads/2017/05/Predictability-SIGMOD2017-768x576.jpg" alt="现有DBMS系统性能的预测"><br><img src="http://mysqlserverteam.com/wp-content/uploads/2017/05/Predictability-SIGMOD2017-2-768x576.jpg" alt="为什么性能可预测性很重要"><br><strong><em><a href="http://web.eecs.umich.edu/~mozafari/php/data/uploads/Predictability-SIGMOD2017.pdf" target="_blank" rel="external">数据来源</a></em></strong></p>
<h2 id="决定删除对查询缓存的支持"><a href="#决定删除对查询缓存的支持" class="headerlink" title="决定删除对查询缓存的支持"></a>决定删除对查询缓存的支持</h2><p>我们赞同University of Michigan, Ann Arbor大学的Jiamin Huang，Barzan Mozafari，Grant Schoenebeck，Thomas F. Wenisch的<a href="https://web.eecs.umich.edu/~mozafari/php/data/uploads/sigmod_2017_predictability.pdf" target="_blank" rel="external">研究成果</a>。 我们考虑了两种方案：一个是我们可以对查询缓存进行哪些改进的方案，另一个是我们可以做出哪些改进，从而为所有工作负载提供改进。</p>
<p>虽然这些选择本身是正交的，但工程资源是有限的。也就是说，我们要改变战略，去把资源投资到能够普遍适用于所有工作负载的改进上来。</p>
<p>我们也同意<a href="http://proxysql.com/blog/scaling-with-proxysql-query-cache" target="_blank" rel="external">Rene的结论</a>，即缓存在靠近客户端时提供了最大的好处<br><img src="http://mysqlserverteam.com/wp-content/uploads/2017/05/QC2.png" alt="缓存性能的表现"><br><strong><em>将缓存移到客户端时，“Client + 2x ProxySQL”结果显示性能提升了5.2倍。</em></strong></p>
<h2 id="现有用户的升级路径"><a href="#现有用户的升级路径" class="headerlink" title="现有用户的升级路径"></a>现有用户的升级路径</h2><p>根据当前的提示说明，查询缓存在MySQL 5.7一下版本仍然会继续得到支持。 但MySQL 8.0不再支持查询缓存，用户升级将被鼓励使用服务器端查询重写或ProxySQL作为中间缓存</p>
<p>我们预计这种变化只会影响到少数用户，但如果您关心此问题，请联系并联系！</p>
<p>感谢您使用MySQL！！</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 查询缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库查询缓存]]></title>
      <url>/2017/10/20/mysql-query-cache/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>起因是近期，集客中的数据又出现了查询极慢的情况。单表1100W数据,在进行count(*)查询的时候,查询性能极差，按照特定条件的查询(已加索引)，查询出月500W数据的时候，大约耗时18s多。<br>可能解决方案:</p>
<ol>
<li>存储引擎修改</li>
<li>查询语句优化</li>
<li>离线预查(此方案结合业务场景)<br>详见此文：[mysql千万级数据count性能优化]</li>
</ol>
<p>在解决的过程中顺道看了下查询缓存的问题，线上库竟然没有开启查询缓存。特此做了些记录。<br><a id="more"></a></p>
<h2 id="查询缓存原理"><a href="#查询缓存原理" class="headerlink" title="查询缓存原理"></a>查询缓存原理</h2><h3 id="查询缓存的实现原理"><a href="#查询缓存的实现原理" class="headerlink" title="查询缓存的实现原理"></a>查询缓存的实现原理</h3><h3 id="查询缓存的写入与过期"><a href="#查询缓存的写入与过期" class="headerlink" title="查询缓存的写入与过期"></a>查询缓存的写入与过期</h3><h2 id="查询缓存相关参数说明"><a href="#查询缓存相关参数说明" class="headerlink" title="查询缓存相关参数说明"></a>查询缓存相关参数说明</h2><h3 id="查询缓存参数"><a href="#查询缓存参数" class="headerlink" title="查询缓存参数"></a>查询缓存参数</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show status like “%Qcache%”;</div><div class="line"></div><div class="line">+-------------------------+---------+</div><div class="line">|<span class="string"> Variable_name           </span>|<span class="string"> Value   </span>|</div><div class="line">+-------------------------+---------+</div><div class="line">|<span class="string"> Qcache_free_blocks      </span>|<span class="string"> 1639    </span>|</div><div class="line">|<span class="string"> Qcache_free_memory      </span>|<span class="string"> 5579448 </span>|</div><div class="line">|<span class="string"> Qcache_hits             </span>|<span class="string"> 1464051 </span>|</div><div class="line">|<span class="string"> Qcache_inserts          </span>|<span class="string"> 2442792 </span>|</div><div class="line">|<span class="string"> Qcache_lowmem_prunes    </span>|<span class="string"> 1910628 </span>|</div><div class="line">|<span class="string"> Qcache_not_cached       </span>|<span class="string"> 447381  </span>|</div><div class="line">|<span class="string"> Qcache_queries_in_cache </span>|<span class="string"> 8707    </span>|</div><div class="line">|<span class="string"> Qcache_total_blocks     </span>|<span class="string"> 19402   </span>|</div><div class="line">+-------------------------+---------+</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量名称</th>
<th>中文</th>
<th>英文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Qcache_free_blocks</td>
<td>查询缓存中空闲内存块数量</td>
<td>The number of free memory blocks in the query cache</td>
<td></td>
</tr>
<tr>
<td>Qcache_free_memory</td>
<td>查询缓存中空闲内存大小</td>
<td>The amount of free memory for the query cache.</td>
<td>单位B</td>
</tr>
<tr>
<td>Qcache_hits</td>
<td>查询缓存命中数</td>
<td>The number of query cache hits</td>
<td></td>
</tr>
<tr>
<td>Qcache_inserts</td>
<td>加入查询缓存的语句数量</td>
<td>The number of queries added to the query cache.</td>
<td></td>
</tr>
<tr>
<td>Qcache_lowmem_prunes</td>
<td>由于内存不足删除的查询语句数</td>
<td>The number of queries that were deleted from the query cache because of low memory</td>
<td>这个数字的持续增长说明内存不足或碎片严重</td>
</tr>
<tr>
<td>Qcache_not_cached</td>
<td>没有被缓存的查询语句数</td>
<td>The number of noncached queries</td>
<td></td>
</tr>
<tr>
<td>Qcache_queries_in_cache</td>
<td>查询缓存中的语句数</td>
<td>The number of queries registered in the query cache</td>
<td></td>
</tr>
<tr>
<td>Qcache_total_blocks</td>
<td>查询缓存的块数</td>
<td>The total number of blocks in the query cache</td>
</tr>
</tbody>
</table>
<p><strong>备注：所有上述参数都已经在mysql5.7.20弃用,在8.0删除,使用时，请确认mysql版本</strong></p>
<h3 id="查询缓存配置参数"><a href="#查询缓存配置参数" class="headerlink" title="查询缓存配置参数"></a>查询缓存配置参数</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like <span class="emphasis">'query_cache%'</span>;</div><div class="line"><span class="code">+------------------------------+</span>----------+</div><div class="line">| Variable<span class="emphasis">_name                | Value    |</span></div><div class="line"><span class="emphasis">+------------------------------+----------+</span></div><div class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_limit            | 1048576  |</span></div><div class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_min_</span>res<span class="emphasis">_unit     | 4096     |</span></div><div class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_size             | 16777216 |</span></div><div class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_type             | ON       |</span></div><div class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_wlock_</span>invalidate | OFF      |</div><div class="line"><span class="code">+------------------------------+</span>----------+</div><div class="line">5 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量名称</th>
<th>中文</th>
<th>英文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>query_cache_limit</td>
<td>查询结果最大限制，大于这个值的不缓存</td>
<td>Do not cache results that are larger than this number of bytes. The default value is 1MB.</td>
<td>默认1MB</td>
</tr>
<tr>
<td>query_cache_min_res_unit</td>
<td>查询缓存中分配的块的最小大小</td>
<td>The minimum size (in bytes) for blocks allocated by the query cache</td>
<td>字节为单位，默认4096B</td>
</tr>
<tr>
<td>query_cache_size</td>
<td>用于缓存查询结果的缓存大小</td>
<td>The amount of memory allocated for caching query results.</td>
<td>默认1M</td>
</tr>
<tr>
<td>query_cache_type</td>
<td>查询缓存的类型0/OFF：不进行查询缓存；1：缓存除SELECT SQL_NO_CACHE开头的所有可缓存查询结果；2：值缓存以SELECT SQL_CACHE开头的可缓存查询</td>
<td>Set the query cache type</td>
<td>默认OFF,如果选择OFF，并不会清空查询缓存大小，如果需要，需设置query_cache_size=0</td>
</tr>
<tr>
<td>query_cache_wlock_invalidate</td>
<td>针对MyISAM引擎表，对表的请求进行限制</td>
<td>Normally, when one client acquires a WRITE lock on a MyISAM table, other clients are not blocked from issuing statements that read from the table if the query results are present in the query cache. Setting this variable to 1 causes acquisition of a WRITE lock for a table to invalidate any queries in the query cache that refer to the table. This forces other clients that attempt to access the table to wait while the lock is in effect</td>
<td>具体解释参见官方说明</td>
</tr>
</tbody>
</table>
<p><strong>备注：所有上述参数都已经在mysql5.7.20弃用,在8.0删除,使用时，请确认mysql版本</strong></p>
<h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html" target="_blank" rel="external">5.1.7 Server Status Variables</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html" target="_blank" rel="external">5.1.5 Server System Variables</a></li>
<li><a href="http://database.51cto.com/art/201010/229956.htm" target="_blank" rel="external">MySQL查询缓存变量</a></li>
<li><a href="https://www.oschina.net/question/554525_132387" target="_blank" rel="external">MYSQL会把查询的结果缓存多久?一个考验人的技术问题</a></li>
<li><a href="/2017/10/20/mysql-8-0-retiring-support-for-the-query-cache/">[译文]mysql8.0:退出对查询缓存的支持</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 查询缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>/2017/09/23/design-patterns-singleton/</url>
      <content type="html"><![CDATA[<h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><blockquote>
<p>保证一个类仅有一个实例，并提供访问它的全局访问点</p>
</blockquote>
<p>我的理解：<br><a id="more"></a></p>
<h2 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h2><blockquote>
<ul>
<li>当类只能有一个实例，而且客户可以从一个众所周知的访问点访问它</li>
<li>当这个唯一的实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时</li>
</ul>
</blockquote>
<p>我的理解：</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="http://www.phppan.com/wp-content/uploads/2010/06/Singleton.jpg" alt="singleton"></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">testsingleton();</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $object = <span class="keyword">null</span>;</div><div class="line">  </div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"create object\n"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">self</span>::$object == <span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">self</span>::$object = <span class="keyword">new</span> singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$object;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testsingleton</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $object = singleton::getInstance();</div><div class="line"></div><div class="line">    $object2 = singleton::getInstance();</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> $object == $object2 ? <span class="string">"one object"</span> : <span class="string">'tow object'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> PHP_EOL;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="明显特征"><a href="#明显特征" class="headerlink" title="明显特征"></a>明显特征</h2><ol>
<li>定义了一个public类型的用来返回对象的方法</li>
<li>定义了一个人private的私有属性，代表具体的类对象，只能通过public方法获得</li>
<li>非public的构造函数，不可直接new对象</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 代码的艺术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> design patterns </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[五个设计模式]]></title>
      <url>/2017/08/26/five-design-patterns/</url>
      <content type="html"><![CDATA[<h2 id="说在前边"><a href="#说在前边" class="headerlink" title="说在前边"></a>说在前边</h2><blockquote>
<p>设计模式是我曾经拿起又放下的东西，经典的<strong><a href="https://book.douban.com/subject/1052241/" target="_blank" rel="external">设计模式</a></strong>那本书也是看过的,但无奈却没有看完。当了两年多的程序员，回想一下，自己对设计模式的理解竟然还是如此的不堪。</p>
<p>随着年龄的增长，工作年限的增加，越发觉得知识的不足与停滞。所以是时候真的真的该慢慢的，默默的学习一些东西了，不然，焦躁的情绪就无处发泄。<br>也许，静静的学习，成长，才能帮助我安静下来，沉淀知识，获得成长。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>本次主要会重点记录自己重新学习五种主要设计模式的一些心得，做个记录。一来，帮助自己增强记忆学习；二来做个记录，方便后边回顾。</p>
<p>为什么选择这几个模式呢，只能说，就我所知，他们被说的更多，被用的更多。</p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><ul>
<li><a href="/2017/08/26/design-patterns-Factory/">工厂模式</a></li>
<li>单例模式</li>
</ul>
<h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><ul>
<li>适配器模式</li>
</ul>
<h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><ul>
<li>策略模式</li>
<li>观察者模式</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 代码的艺术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> design patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工厂模式]]></title>
      <url>/2017/08/26/design-patterns-Factory/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 代码的艺术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> design patterns </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下忘记mysql的root密码怎么办]]></title>
      <url>/2017/08/17/forget-mysql-password/</url>
      <content type="html"><![CDATA[<h2 id="修改MySql的登录设置"><a href="#修改MySql的登录设置" class="headerlink" title="修改MySql的登录设置"></a>修改MySql的登录设置</h2><p><code>vi /etc/my.cnf</code></p>
<p>在[mysqld]的段中加上一句：<strong><em>skip-grant-tables</em></strong><br>Example:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">port                    = 3306</div><div class="line">socket                  = /tmp/mysql.sock</div><div class="line">skip-grant-tables</div></pre></td></tr></table></figure></p>
<p>【备注】：此操作后数据库不需要密码即可登录，请确认网络环境安全后进行操作<br><a id="more"></a></p>
<h2 id="重启mysql"><a href="#重启mysql" class="headerlink" title="重启mysql"></a>重启mysql</h2><p>此命令前提是linux已配置可使用此种方式重启mysql<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># service mysql restart</div><div class="line"><span class="function"><span class="title">Shutting</span></span> down MySQL.. SUCCESS!</div><div class="line"><span class="function"><span class="title">Starting</span></span> MySQL.. SUCCESS!</div></pre></td></tr></table></figure></p>
<h2 id="登录mysql并修改root密码"><a href="#登录mysql并修改root密码" class="headerlink" title="登录mysql并修改root密码"></a>登录mysql并修改root密码</h2><h3 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">mysql -uroot</span></div></pre></td></tr></table></figure>
<h3 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use user;</div><div class="line">mysql&gt; update<span class="built_in"> user </span><span class="builtin-name">set</span> Password = password(<span class="string">"new_password"</span>) where <span class="attribute">User</span>=<span class="string">"root"</span>;</div><div class="line">mysql&gt; quit;</div><div class="line">Bye</div></pre></td></tr></table></figure>
<h2 id="将my-cnf配置改回来"><a href="#将my-cnf配置改回来" class="headerlink" title="将my.cnf配置改回来"></a>将my.cnf配置改回来</h2><h2 id="重启mysql-1"><a href="#重启mysql-1" class="headerlink" title="重启mysql"></a>重启mysql</h2><hr>
<p>接下来就可以使用新密码登录了</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[保证分布式系统数据一致性的6种方案]]></title>
      <url>/2017/08/10/6-method-ensure-consistency/</url>
      <content type="html"><![CDATA[<p>来自：<a href="http://weibo.com/archnotes" target="_blank" rel="external">@高可用架构</a>​​​​<br>原文链接：<a href="http://weibo.com/ttarticle/p/show?id=2309403965965003062676#_0" target="_blank" rel="external">http://weibo.com/ttarticle/p/show?id=2309403965965003062676#_0</a></p>
<blockquote>
<p>编者按：本文由「高可用架构后花园」群讨论整理而成。<br>有人的地方，就有江湖<br>有江湖的地方，就有纷争</p>
</blockquote>
<a id="more"></a>
<h2 id="问题的起源"><a href="#问题的起源" class="headerlink" title="问题的起源"></a>问题的起源</h2><p>在电商等业务中，系统一般由多个独立的服务组成，如何解决分布式调用时候数据的一致性？ </p>
<p>具体业务场景如下，比如一个业务操作，如果同时调用服务 A、B、C，需要满足要么同时成功；要么同时失败。A、B、C 可能是多个不同部门开发、部署在不同服务器上的远程服务。</p>
<p>在分布式系统来说，如果不想牺牲一致性，CAP 理论告诉我们只能放弃可用性，这显然不能接受。为了便于讨论问题，先简单介绍下数据一致性的基础理论。</p>
<ul>
<li><p>强一致</p>
<blockquote>
<p>当更新操作完成之后，任何多个后续进程或者线程的访问都会返回最新的更新过的值。这种是对用户最友好的，就是用户上一次写什么，下一次就保证能读到什么。根据 CAP 理论，这种实现需要牺牲可用性。</p>
</blockquote>
</li>
<li><p>弱一致性</p>
<blockquote>
<p>系统并不保证续进程或者线程的访问都会返回最新的更新过的值。系统在数据写入成功之后，不承诺立即可以读到最新写入的值，也不会具体的承诺多久之后可以读到</p>
</blockquote>
</li>
<li><p>最终一致性</p>
<blockquote>
<p>弱一致性的特定形式。系统保证在没有后续更新的前提下，系统最终返回上一次更新操作的值。在没有故障发生的前提下，不一致窗口的时间主要受通信延迟，系统负载和复制副本的个数影响。DNS 是一个典型的最终一致性系统。</p>
</blockquote>
</li>
</ul>
<p>在工程实践上，为了保障系统的可用性，互联网系统大多将强一致性需求转换成最终一致性的需求，并通过系统执行幂等性的保证，保证数据的最终一致性。但在电商等场景中，对于数据一致性的解决方法和常见的互联网系统（如 MySQL 主从同步）又有一定区别，群友的讨论分成以下 6 种解决方案。</p>
<h2 id="规避分布式事务——业务整合"><a href="#规避分布式事务——业务整合" class="headerlink" title="规避分布式事务——业务整合"></a>规避分布式事务——业务整合</h2><p>业务整合方案主要采用将接口整合到本地执行的方法。拿问题场景来说，则可以将服务 A、B、C 整合为一个服务 D 给业务，这个服务 D 再通过转换为本地事务的方式，比如服务 D 包含本地服务和服务 E，而服务 E 是本地服务 A ~ C 的整合。</p>
<p><strong>优点</strong>：解决（规避）了分布式事务。</p>
<p><strong>缺点</strong>：显而易见，把本来规划拆分好的业务，又耦合到了一起，业务职责不清晰，不利于维护。</p>
<p>由于这个方法存在明显缺点，通常不建议使用。</p>
<h2 id="经典方案-eBay-模式"><a href="#经典方案-eBay-模式" class="headerlink" title="经典方案 - eBay 模式"></a>经典方案 - eBay 模式</h2><p>此方案的核心是将需要分布式处理的任务通过消息日志的方式来异步执行。消息日志可以存储到本地文本、数据库或消息队列，再通过业务规则自动或人工发起重试。人工重试更多的是应用于支付场景，通过对账系统对事后问题的处理。</p>
<p><strong>消息日志方案的核心是保证服务接口的幂等性。</strong></p>
<p>考虑到网络通讯失败、数据丢包等原因，如果接口不能保证幂等性，数据的唯一性将很难保证。</p>
<p>eBay 方式的主要思路如下。</p>
<p><strong>Base：一种 Acid 的替代方案</strong></p>
<p>此方案是 eBay 的架构师 Dan Pritchett 在 2008 年发表给 ACM 的文章，是一篇解释 BASE 原则，或者说最终一致性的经典文章。文中讨论了 BASE 与 ACID 原则在保证数据一致性的基本差异。</p>
<p>如果 ACID 为分区的数据库提供一致性的选择，那么如何实现可用性呢？答案是</p>
<p><strong>BASE (basically available, soft state, eventually consistent)</strong></p>
<p>BASE 的可用性是通过支持局部故障而不是系统全局故障来实现的。下面是一个简单的例子：如果将用户分区在 5 个数据库服务器上，BASE 设计鼓励类似的处理方式，一个用户数据库的故障只影响这台特定主机那 20% 的用户。这里不涉及任何魔法，不过它确实可以带来更高的可感知的系统可用性。</p>
<p>文章中描述了一个最常见的场景，如果产生了一笔交易，需要在交易表增加记录，同时还要修改用户表的金额。这两个表属于不同的远程服务，所以就涉及到分布式事务一致性的问题。</p>
<p><img src="https://ww1.sinaimg.cn/large/006kbv1Jgw1f31xaggg0bj30cq09mq3h.jpg" alt="Alt text"></p>
<p>文中提出了一个经典的解决方法，将主要修改操作以及更新用户表的消息放在一个本地事务来完成。同时为了避免重复消费用户表消息带来的问题，达到多次重试的幂等性，增加一个<strong>更新记录表 updates_applied</strong> 来记录已经处理过的消息。</p>
<p><img src="https://ww4.sinaimg.cn/large/006kbv1Jgw1f31xaq6ex2j30ct082wev.jpg" alt="Alt text"></p>
<p>系统的执行伪代码如下</p>
<p><img src="https://ww3.sinaimg.cn/large/006kbv1Jgw1f31xa82oomj30j30iawgc.jpg" alt="code"></p>
<h2 id="去哪儿网分布式事务方案"><a href="#去哪儿网分布式事务方案" class="headerlink" title="去哪儿网分布式事务方案"></a>去哪儿网分布式事务方案</h2><p>随着业务规模不断地扩大，电商网站一般都要面临拆分之路。就是将原来一个单体应用拆分成多个不同职责的子系统。比如以前可能将面向用户、客户和运营的功能都放在一个系统里，现在拆分为订单中心、代理商管理、运营系统、报价中心、库存管理等多个子系统。</p>
<p><strong>拆分首先要面临的是什么呢？</strong></p>
<p>最开始的单体应用所有功能都在一起，存储也在一起。比如运营要取消某个订单，那直接去更新订单表状态，然后更新库存表就 ok 了。因为是单体应用，库在一起，这些都可以在一个事务里，由关系数据库来保证一致性。</p>
<p>但拆分之后就不同了，不同的子系统都有自己的存储。比如订单中心就只管理自己的订单库，而库存管理也有自己的库。那么运营系统取消订单的时候就是通过接口调用等方式来调用订单中心和库存管理的服务了，而不是直接去操作库。这就涉及一个『分布式事务』的问题。</p>
<p>分布式事务有两种解决方式</p>
<h3 id="优先使用异步消息。"><a href="#优先使用异步消息。" class="headerlink" title="优先使用异步消息。"></a>优先使用异步消息。</h3><p>上文已经说过，使用异步消息 Consumer 端需要实现幂等。</p>
<p>幂等有两种方式，一种方式是业务逻辑保证幂等。比如接到支付成功的消息订单状态变成支付完成，如果当前状态是支付完成，则再收到一个支付成功的消息则说明消息重复了，直接作为消息成功处理。</p>
<p>另外一种方式如果业务逻辑无法保证幂等，则要增加一个去重表或者类似的实现。对于 producer 端在业务数据库的同实例上放一个消息库，发消息和业务操作在同一个本地事务里。发消息的时候消息并不立即发出，而是向消息库插入一条消息记录，然后在事务提交的时候再异步将消息发出，发送消息如果成功则将消息库里的消息删除，如果遇到消息队列服务异常或网络问题，消息没有成功发出那么消息就留在这里了，会有另外一个服务不断地将这些消息扫出重新发送。</p>
<h3 id="有的业务不适合异步消息的方式，事务的各个参与方都需要同步的得到结果。"><a href="#有的业务不适合异步消息的方式，事务的各个参与方都需要同步的得到结果。" class="headerlink" title="有的业务不适合异步消息的方式，事务的各个参与方都需要同步的得到结果。"></a>有的业务不适合异步消息的方式，事务的各个参与方都需要同步的得到结果。</h3><p>这种情况的实现方式其实和上面类似，每个参与方的本地业务库的同实例上面放一个事务记录库。</p>
<p>比如 A 同步调用 B，C。A 本地事务成功的时候更新本地事务记录状态，B 和 C 同样。如果有一次 A 调用 B 失败了，这个失败可能是 B 真的失败了，也可能是调用超时，实际 B 成功。则由一个中心服务对比三方的事务记录表，做一个最终决定。假设现在三方的事务记录是 A 成功，B 失败，C 成功。那么最终决定有两种方式，根据具体场景：</p>
<ol>
<li>重试 B，直到 B 成功，事务记录表里记录了各项调用参数等信息；</li>
<li>执行 A 和 B 的补偿操作(一种可行的补偿方式是回滚)。</li>
</ol>
<p>对 b 场景做一个特殊说明：比如 B 是扣库存服务，在第一次调用的时候因为某种原因失败了，但是重试的时候库存已经变为 0，无法重试成功，这个时候只有回滚 A 和 C 了。</p>
<p>那么可能有人觉得在业务库的同实例里放消息库或事务记录库，会对业务侵入，业务还要关心这个库，是否一个合理的设计？</p>
<p>实际上可以依靠运维的手段来简化开发的侵入，我们的方法是让 DBA 在公司所有 MySQL 实例上预初始化这个库，通过框架层（消息的客户端或事务 RPC 框架）透明的在背后操作这个库，业务开发人员只需要关心自己的业务逻辑，不需要直接访问这个库。</p>
<p>总结起来，其实两种方式的根本原理是类似的，也就是<strong>将分布式事务转换为多个本地事务，然后依靠重试等方式达到最终一致性。</strong> </p>
<h2 id="蘑菇街交易创建过程中的分布式一致性方案"><a href="#蘑菇街交易创建过程中的分布式一致性方案" class="headerlink" title="蘑菇街交易创建过程中的分布式一致性方案"></a>蘑菇街交易创建过程中的分布式一致性方案</h2><p>交易创建的一般性流程</p>
<p>我们把交易创建流程抽象出一系列可扩展的功能点，每个功能点都可以有多个实现（具体的实现之间有组合/互斥关系）。把各个功能点按照一定流程串起来，就完成了交易创建的过程。 </p>
<p><img src="https://ww1.sinaimg.cn/large/006kbv1Jgw1f31xdryziuj30i008d0tu.jpg" alt="function"></p>
<p><strong>面临的问题</strong></p>
<p>每个功能点的实现都可能会依赖外部服务。那么如何保证各个服务之间的数据是一致的呢？比如锁定优惠券服务调用超时了，不能确定到底有没有锁券成功，该如何处理？再比如锁券成功了，但是扣减库存失败了，该如何处理？</p>
<p><strong>方案选型</strong></p>
<p>服务依赖过多，会带来管理复杂性增加和稳定性风险增大的问题。试想如果我们强依赖 10 个服务，9 个都执行成功了，最后一个执行失败了，那么是不是前面 9 个都要回滚掉？这个成本还是非常高的。</p>
<p>所以在拆分大的流程为多个小的本地事务的前提下，对于非实时、非强一致性的关联业务写入，在本地事务执行成功后，我们选择发消息通知、关联事务异步化执行的方案。</p>
<p><strong>消息通知往往不能保证 100% 成功；且消息通知后，接收方业务是否能执行成功还是未知数。前者问题可以通过重试解决；后者可以选用事务消息来保证。</strong></p>
<p>但是事务消息框架本身会给业务代码带来侵入性和复杂性，所以我们选择基于 DB 事件变化通知到 MQ 的方式做系统间解耦，通过订阅方消费 MQ 消息时的 ACK 机制，保证消息一定消费成功，达到最终一致性。由于消息可能会被重发，消息订阅方业务逻辑处理要做好幂等保证。</p>
<p>所以目前只剩下需要实时同步做、有强一致性要求的业务场景了。在交易创建过程中，锁券和扣减库存是这样的两个典型场景。</p>
<p>要保证多个系统间数据一致，乍一看，必须要引入分布式事务框架才能解决。但引入非常重的类似二阶段提交分布式事务框架会带来复杂性的急剧上升；在电商领域，绝对的强一致是过于理想化的，我们可以选择准实时的最终一致性。</p>
<p>我们在交易创建流程中，首先创建一个不可见订单，然后在同步调用锁券和扣减库存时，针对调用异常（失败或者超时），发出废单消息到MQ。如果消息发送失败，本地会做时间阶梯式的异步重试；优惠券系统和库存系统收到消息后，会进行判断是否需要做业务回滚，这样就准实时地保证了多个本地事务的最终一致性。</p>
<p><img src="https://ww2.sinaimg.cn/large/006kbv1Jgw1f31xeajfqkj30680i2wez.jpg" alt="下单"></p>
<h2 id="支付宝及蚂蚁金融云的分布式服务-DTS-方案"><a href="#支付宝及蚂蚁金融云的分布式服务-DTS-方案" class="headerlink" title="支付宝及蚂蚁金融云的分布式服务 DTS 方案"></a>支付宝及蚂蚁金融云的分布式服务 DTS 方案</h2><p>业界常用的还有支付宝的一种 xts 方案，由支付宝在 2PC 的基础上改进而来。主要思路如下，大部分信息引用自官方网站。</p>
<h3 id="分布式事务服务简介"><a href="#分布式事务服务简介" class="headerlink" title="分布式事务服务简介"></a>分布式事务服务简介</h3><p>分布式事务服务 (Distributed Transaction Service, DTS) 是一个分布式事务框架，用来保障在大规模分布式环境下事务的最终一致性。DTS 从架构上分为 xts-client 和 xts-server 两部分，前者是一个嵌入客户端应用的 JAR 包，主要负责事务数据的写入和处理；后者是一个独立的系统，主要负责异常事务的恢复。</p>
<h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><p>传统关系型数据库的事务模型必须遵守 ACID 原则。在单数据库模式下，ACID 模型能有效保障数据的完整性，但是在大规模分布式环境下，一个业务往往会跨越多个数据库，如何保证这多个数据库之间的数据一致性，需要其他行之有效的策略。在 JavaEE 规范中使用 2PC (2 Phase Commit, 两阶段提交) 来处理跨 DB 环境下的事务问题，但是 2PC 是反可伸缩模式，也就是说，在事务处理过程中，参与者需要一直持有资源直到整个分布式事务结束。这样，当业务规模达到千万级以上时，2PC 的局限性就越来越明显，系统可伸缩性会变得很差。基于此，我们采用 BASE 的思想实现了一套类似 2PC 的分布式事务方案，这就是 DTS。DTS在充分保障分布式环境下高可用性、高可靠性的同时兼顾数据一致性的要求，其最大的特点是保证数据最终一致 (Eventually consistent)。</p>
<p>简单的说，DTS 框架有如下特性：</p>
<ul>
<li>最终一致：事务处理过程中，会有短暂不一致的情况，但通过恢复系统，可以让事务的数据达到最终一致的目标。</li>
<li>协议简单：DTS 定义了类似 2PC 的标准两阶段接口，业务系统只需要实现对应的接口就可以使用 DTS 的事务功能。</li>
<li>与 RPC 服务协议无关：在 SOA 架构下，一个或多个 DB 操作往往被包装成一个一个的 Service，Service 与 Service 之间通过 RPC 协议通信。DTS 框架构建在 SOA 架构上，与底层协议无关。</li>
<li>与底层事务实现无关： DTS 是一个抽象的基于 Service 层的概念，与底层事务实现无关，也就是说在 DTS 的范围内，无论是关系型数据库 MySQL，Oracle，还是 KV 存储 MemCache，或者列存数据库 HBase，只要将对其的操作包装成 DTS 的参与者，就可以接入到 DTS 事务范围内。</li>
</ul>
<p>以下是分布式事务框架的流程图<br><img src="https://ww2.sinaimg.cn/large/006kbv1Jgw1f31xfuizhpj30a70b7q3x.jpg" alt="flow"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol>
<li>一个完整的业务活动由一个主业务服务与若干从业务服务组成。</li>
<li>主业务服务负责发起并完成整个业务活动。</li>
<li>从业务服务提供 TCC 型业务操作。</li>
<li>业务活动管理器控制业务活动的一致性，它登记业务活动中的操作，并在活动提交时确认所有的两阶段事务的 confirm 操作，在业务活动取消时调用所有两阶段事务的 cancel 操作。”</li>
</ol>
<p><strong>与 2PC 协议比较</strong></p>
<ol>
<li>没有单独的 Prepare 阶段，降低协议成本</li>
<li>系统故障容忍度高，恢复简单</li>
</ol>
<h2 id="农信网数据一致性方案"><a href="#农信网数据一致性方案" class="headerlink" title="农信网数据一致性方案"></a>农信网数据一致性方案</h2><h3 id="电商业务"><a href="#电商业务" class="headerlink" title="电商业务"></a>电商业务</h3><p>公司的支付部门，通过接入其它第三方支付系统来提供支付服务给业务部门，支付服务是一个基于 Dubbo 的 RPC 服务。<br>对于业务部门来说，电商部门的订单支付，需要调用</p>
<ol>
<li>支付平台的支付接口来处理订单；</li>
<li>同时需要调用积分中心的接口，按照业务规则，给用户增加积分。</li>
</ol>
<p>从业务规则上需要同时保证业务数据的实时性和一致性，也就是支付成功必须加积分。</p>
<p>我们采用的方式是同步调用，首先处理本地事务业务。考虑到积分业务比较单一且业务影响低于支付，由积分平台提供增加与回撤接口。</p>
<p>具体的流程是先调用积分平台增加用户积分，再调用支付平台进行支付处理，如果处理失败，catch 方法调用积分平台的回撤方法，将本次处理的积分订单回撤。<br><img src="https://ww3.sinaimg.cn/large/006kbv1Jgw1f31xgmb4wrj30hl09rgmn.jpg" alt="pic"></p>
<h3 id="用户信息变更"><a href="#用户信息变更" class="headerlink" title="用户信息变更"></a>用户信息变更</h3><p>公司的用户信息，统一由用户中心维护，而用户信息的变更需要同步给各业务子系统，业务子系统再根据变更内容，处理各自业务。用户中心作为 MQ 的 producer，添加通知给 MQ。APP Server 订阅该消息，同步本地数据信息，再处理相关业务比如 APP 退出下线等。</p>
<p>我们采用异步消息通知机制，目前主要使用 ActiveMQ，基于 Virtual Topic 的订阅方式，保证单个业务集群订阅的单次消费。<br><img src="https://ww1.sinaimg.cn/large/006kbv1Jgw1f31xhl94fyj30hu08qt9j.jpg" alt="信息变更"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分布式服务对衍生的配套系统要求比较多，特别是我们基于消息、日志的最终一致性方案，需要考虑消息的积压、消费情况、监控、报警等。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>Base: An Acid Alternative (eBay 方案)</li>
</ol>
<p>In partitioned databases, trading some consistency for availability can lead to dramatic improvements in scalability.</p>
<p>英文版 ： <a href="http://queue.acm.org/detail.cfm?id=1394128" target="_blank" rel="external">http://queue.acm.org/detail.cfm?id=1394128</a> </p>
<p>中文版： <a href="http://article.yeeyan.org/view/167444/125572" target="_blank" rel="external">http://article.yeeyan.org/view/167444/125572</a></p>
<ol>
<li>分布式事务服务 (DTS)  <a href="https://www.cloud.alipay.com/docs/middleware/xts/index.html" target="_blank" rel="external">https://www.cloud.alipay.com/docs/middleware/xts/index.html</a></li>
</ol>
<p>感谢李玉福、余昭辉、蘑菇街七公提供方案，其他多位群成员对本文内容亦有贡献。</p>
<p>本文编辑李玉福、Tim Yang，转载请注明来自<img src="http://weibo.com/archnotes" alt="@高可用架构">​​​​</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 一致性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql查询数据库和表所占空间大小]]></title>
      <url>/2017/08/08/mysql-space-used/</url>
      <content type="html"><![CDATA[<h2 id="查询数据库所占空间大小"><a href="#查询数据库所占空间大小" class="headerlink" title="查询数据库所占空间大小"></a>查询数据库所占空间大小</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(DATA_LENGTH)+<span class="built_in">sum</span>(INDEX_LENGTH) <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">WHERE</span> D</div></pre></td></tr></table></figure>
<p>得到的结果是单位是字节Byte</p>
<h2 id="查询数据库中所有表所占空间的大小"><a href="#查询数据库中所有表所占空间的大小" class="headerlink" title="查询数据库中所有表所占空间的大小"></a>查询数据库中所有表所占空间的大小</h2><a id="more"></a>
<p>在数据库的中的<strong>information_schema</strong>数据库中有一个 TABLES 表，这个表主要字段分别是：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>TABLE_SCHEMA</td>
<td>数据库名</td>
</tr>
<tr>
<td>TABLE_NAME</td>
<td>表名</td>
</tr>
<tr>
<td>ENGINE</td>
<td>所使用的存储引擎</td>
</tr>
<tr>
<td>TABLES_ROWS</td>
<td>记录数</td>
</tr>
<tr>
<td>DATA_LENGTH</td>
<td>数据大小</td>
</tr>
<tr>
<td>INDEX_LENGTH</td>
<td>索引大小</td>
</tr>
</tbody>
</table>
<ul>
<li>查询所有表数据和索引的的大小</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> TABLE_NAME,DATA_LENGTH+INDEX_LENGTH,TABLE_ROWS <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">"数据库名"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>查询某个表的数据大小和索引大小</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT TABLE_NAME,DATA_LENGTH+INDEX_LENGTH,TABLE_ROWS <span class="keyword">FROM</span> information_schema.TABLES WHERE <span class="attribute">TABLE_SCHEMA</span>=<span class="string">"数据库名"</span> <span class="keyword">AND</span> <span class="attribute">TABLE_NAME</span>=<span class="string">"表名"</span>;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[必须好使的git命令]]></title>
      <url>/2017/07/29/useful-git-command/</url>
      <content type="html"><![CDATA[<h2 id="git设置颜色高亮显示"><a href="#git设置颜色高亮显示" class="headerlink" title="git设置颜色高亮显示"></a>git设置颜色高亮显示</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git<span class="built_in"> config </span>--global  color.ui <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="git-命令别名设置"><a href="#git-命令别名设置" class="headerlink" title="git 命令别名设置"></a>git 命令别名设置</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git<span class="built_in"> config </span>--global  alias.br   branch</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="查看git提交日志"><a href="#查看git提交日志" class="headerlink" title="查看git提交日志"></a>查看git提交日志</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure>
<h2 id="查看最近的提交内容"><a href="#查看最近的提交内容" class="headerlink" title="查看最近的提交内容"></a>查看最近的提交内容</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">show</span>          #最近一次</div><div class="line">git <span class="keyword">show</span> <span class="keyword">HEAD</span>^    #往前推一次,等于git <span class="keyword">show</span> <span class="keyword">HEAD</span>~<span class="number">1</span> </div><div class="line">git <span class="keyword">show</span> <span class="keyword">HEAD</span>^^   #往前推两次,等于git <span class="keyword">show</span> <span class="keyword">HEAD</span>~<span class="number">2</span></div></pre></td></tr></table></figure>
<p><strong>找到规律的同学应该知道怎么看更早之前的记录了</strong></p>
<h2 id="一次加入所有修改，包括delete"><a href="#一次加入所有修改，包括delete" class="headerlink" title="一次加入所有修改，包括delete"></a>一次加入所有修改，包括delete</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> -u         <span class="comment">#一次加入所有被修改的内容，包含 modified 及 deleted</span></span></div><div class="line"><span class="bash">git add --update   <span class="comment">#同上</span></span></div></pre></td></tr></table></figure>
<h2 id="移动文件或重命名"><a href="#移动文件或重命名" class="headerlink" title="移动文件或重命名"></a>移动文件或重命名</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git mv my_folder/numbers<span class="selector-class">.txt</span> .   #将my_folder/numbers.txt文件移动到当前目录,文件名不变</div><div class="line">git mv numbers<span class="selector-class">.txt</span> num<span class="selector-class">.txt</span>        #修改文件名</div></pre></td></tr></table></figure>
<h2 id="Git将”尚未被提交”的内容分成三种类型，分別是"><a href="#Git将”尚未被提交”的内容分成三种类型，分別是" class="headerlink" title="Git将”尚未被提交”的内容分成三种类型，分別是"></a>Git将”尚未被提交”的内容分成三种类型，分別是</h2><ul>
<li>Changes to be committed（将要提交的内容）</li>
<li>Changes not staged for commit（被修改但未提交）</li>
<li>Untracked files（没有如版本库的文件）</li>
</ul>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ol>
<li>变回未修改状态</li>
</ol>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="comment">-- &lt;file&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>回到未提交状态</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> &lt;<span class="keyword">file</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="回到指定版本"><a href="#回到指定版本" class="headerlink" title="回到指定版本"></a>回到指定版本</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> --oneline  #显示<span class="built_in">log</span>日志，但只显示commit id和提交描述</div><div class="line"></div><div class="line">a2ba80 First commit</div><div class="line"><span class="number">80635e7</span> 增加<span class="built_in">index</span>.html文件</div><div class="line">c65ef5e Create README.md</div></pre></td></tr></table></figure>
<p>选择commit id 使用下述命令回到指定版本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> <span class="comment">--hard 5a2ba80</span></div></pre></td></tr></table></figure>
<h2 id="查看git历史修改记录"><a href="#查看git历史修改记录" class="headerlink" title="查看git历史修改记录"></a>查看git历史修改记录</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git reflog                                    <span class="comment">#查看所有记录</span></div><div class="line">80635e7 HEAD<span class="meta">@&#123;2&#125;:</span> commit: 增加index.html文件   <span class="comment">#三列;1是commit id;2是short name;3是描述</span></div><div class="line">git show <span class="variable">&lt;commit id&gt;</span>                          <span class="comment">#查看指定记录</span></div><div class="line">git show <span class="variable">&lt;short name&gt;</span>                         <span class="comment">#同上</span></div></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建并删除分支"><a href="#创建并删除分支" class="headerlink" title="创建并删除分支"></a>创建并删除分支</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">branch </span>develop</div><div class="line">git checkout -<span class="keyword">b </span>&lt;new <span class="keyword">branch </span>name&gt;  <span class="comment">#建立分支并切换到该分支</span></div><div class="line">git <span class="keyword">branch </span>-f &lt;new <span class="keyword">branch </span>name&gt; &lt;commit id&gt; <span class="comment">#在指定版本上建立分支</span></div><div class="line">git <span class="keyword">branch </span>-D &lt;<span class="keyword">branch </span>name&gt; <span class="comment">#删除分支</span></div></pre></td></tr></table></figure>
<h3 id="修改远程分支名称"><a href="#修改远程分支名称" class="headerlink" title="修改远程分支名称"></a>修改远程分支名称</h3><p>一般来说，我们主要的分支都是origin，但其实这个名字是可以改的<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote <span class="built_in">rename</span> <span class="built_in">origin</span> github</div></pre></td></tr></table></figure></p>
<h3 id="上传分支需改"><a href="#上传分支需改" class="headerlink" title="上传分支需改"></a>上传分支需改</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push &lt;remote <span class="built_in">name</span>&gt; &lt;branch <span class="built_in">name</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="删除远端分支"><a href="#删除远端分支" class="headerlink" title="删除远端分支"></a>删除远端分支</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push &lt;remote <span class="built_in">name</span>&gt; :&lt;branch <span class="built_in">name</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">branch </span>       <span class="comment">#只看本地分支</span></div><div class="line">git <span class="keyword">branch </span>-a     <span class="comment">#查看本地及远程分支</span></div></pre></td></tr></table></figure>
<h2 id="版本暂存"><a href="#版本暂存" class="headerlink" title="版本暂存"></a>版本暂存</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git stash   <span class="comment">#暂存目前修改的内容</span></div><div class="line">git stash list <span class="comment"># 列出所有暂存的内容</span></div><div class="line">git show stash@&#123;0&#125; <span class="comment">#显示暂存内容的详情</span></div><div class="line">git stash <span class="keyword">pop</span>  <span class="comment">#取出最近一次暂存的内容</span></div><div class="line">git stash <span class="keyword">pop</span> stash@&#123;n&#125; <span class="comment">#取出指定的暂存内容</span></div><div class="line">git stash drop <span class="comment">#删除暂存的内容</span></div><div class="line">git stash drop stash@&#123;n&#125;  <span class="comment">#删除指定的暂存内容</span></div><div class="line">git stash clear <span class="comment">#清空暂存区</span></div></pre></td></tr></table></figure>
<h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><p>如果我们用到外部依赖的库的时候，通常需要使用子模块来实现</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">submodule </span><span class="keyword">add </span>git@github.com:<span class="keyword">jquery/jquery.git </span><span class="keyword">jquery </span> <span class="comment">#添加jquery作为子模块</span></div></pre></td></tr></table></figure>
<h3 id="初始化子模块"><a href="#初始化子模块" class="headerlink" title="初始化子模块"></a>初始化子模块</h3><p>使用子模块的项目在clone出新的项目后，必须初始化子模块内容<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">submodule </span>init</div><div class="line"><span class="symbol">git</span> <span class="keyword">submodule </span>update</div></pre></td></tr></table></figure></p>
<p>在clone的时候加上<strong>--recursive</strong>可以直接完成子模块的初始化<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">--recursive</span> git@github.com:zlargon/git-test.git</div></pre></td></tr></table></figure></p>
<h3 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h3><ol>
<li>删除子模块<br><code>rm -rf &lt;submodule path&gt;</code></li>
<li>刪除.gitmodules 里边的submodule设置</li>
<li>提交修改</li>
<li>刪除 .git/config 里面的submodule 设置内容</li>
<li>刪除 .git/modules/<module name="">里边的内容</module></li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.gitbook.com/book/zlargon/git-tutorial/details" target="_blank" rel="external">Git使用说明</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些小技巧]]></title>
      <url>/2017/07/29/some_tips/</url>
      <content type="html"><![CDATA[<h2 id="macos设置从终端启动sublime"><a href="#macos设置从终端启动sublime" class="headerlink" title="macos设置从终端启动sublime"></a>macos设置从终端启动sublime</h2><blockquote>
<p>alias subl=\’’/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl’\’</p>
</blockquote>
<p><em>说明：其实就是设置了一个别名</em></p>
<p><strong>to be continue……</strong></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[My First Hexo blog]]></title>
      <url>/2017/07/29/My-First-Hexo-blog/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">sorry, you can't read this post!</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+8hNeHbBm1usUh3w7Z6m17dCiuRccbhI4MBF68gcVzzlMwnoxKk6HalI2PziOCXyfL66jpArfxvdoVm5xG3eiEbEAAckzfYffZ79jmClXlbfIQ/D1zcGpciEYpoXcENGjd9dvZmAE3kEkXRBXQt2k6QpXwB9PcfMJpJERm4JDFQNV5FbFvLThVaPYXzZjN3s8IpbnSz6hU6ZHSDOZ35VG8rQtAOg+UioESQ1mnqO7ujXpeJvKv+U9mTTXYx0hC3jPvcsGJFFhiF3h50sB2x4JA43MHi1MH9RmDixq04bDep4aID6CXpI/WwyAGfpoc9NKSO41NiEh9LqKDw/6wMgvoxRqUP5IJGAtrKRDwN8Mmc9dZFe2ZAFJy+fF6QtSFeDX1n7kYjSB3OxngEiotuL5h5iGgUq65wWSK/TNYKv4fjLIcxTUf0tQWwjuJa6YKFlpkU8Yg0k2KwDoLIES6pTPGQ9IS7VPaDZX9aNQYBTTZIi0HMJZAml/BO+g18OYOQ8rsQWak3wdYxIikPVS7nlRLRe5VPJ1a/gAw6agUSheKfvyrAUeoBHntgsLAhNIIj5cEIPVUJ73mHZRDpCximoe0BjIUCKnS9rqQJHJTolLr50xfuHzttEp+mrbLQdJ/29s/lHYhN6en1fNOw8Y5cyTqRtGakithh4Orgz1IZ4HgvLXlM415QJodHrmPyF2l0dAYmJZ0inwToDd+QiR+bOazBoPb+lBTK+XRvmQ83WDYYZyhDApeAbGjCIoGi2GRsTuVnt1/Uv0Cs9q+iAlpUP92S2RhK5NP62Rk6mIIJQOjS2RjMC0I27h0ScXEY2jwDFrQ6ZaJvYC8XPpSgDIrX0pdAvArVZNeugIN2s5R17bCgoTsVbTnlHWO7wYeZD+HQNFFIzlEStrRo6e5HESXBIZtqjplAyU0JeEv8zoe5tYqhpFaLXe0Spk+3TmCnBmQRQQexAzfav+7tebH6+DmtuY0PbJttSDVZN7ia3mynqLmZd4JjM8hxarVwvLalJYgj7rNyJJJeZirw1toEFnwDT8mvgAFRSZPvrP49B2/pVGdHviIe4tWxDY+lnuAtaGEz9qjo3Tqkn4MT2SABjIqhSSDUZRgi+13wd5eAGUDhlXtuvWUZyJCTk5380NW2I9I6g4X5HD5nnLqJAcmcqyW+rztIQQrECIs2UWahhwhmu12QIUyT3GvgF/f76gEj+mqNOnDT9pEjbd3r09tWHRGYknbHSWpdymXwUSIo63iJsorfLAnLQ1UsXveJbq6dGuaP5pe7/cfIS7KCT9Mhz9EuiXsoA0891YSwu80MHiEVwKQM83eKaJzIv45ISoUoowkVS2RoqRaALjmzR9Q6wUfnxbro3zYZ8/YcD3WtSgJ50Yd6v6M0WQPLuSFB5oofxzzD5Xs8aBK3NhHgr9uM50f6I6FULEIwPm3cqWisD9qooPzgIKezCF9JbDoeqppOJV+hkO2XKUipUh2MBnZcXrIqQt6EXCGeR69DdN4JQOQhL5956Jtr0ryq0c4tBtLsWqj7yCJIEd/VoO31LT2IdHXq+HdhBAKdOx6R2infVCSPWcQg4KMtrJ00melj7oz4LCikCOTCyxyaKdre267eq2qpSIj12VwCGJpr4qvYfZXTTdX+K+cHWhbuWG1brHb6gARGf5UUl3aXSS6S4QGqDz5OAIkBQOrD75FSqa1mZjoEsyo6fphr9hk8tQVaGNHkupqHw9yJk7zBCO5ExA+ori493DkKdeKQKNnRjwPbuY8AWa/LtRSJEiZyp3Chrwuvqf3LXICpfNmo6muwpI4bU4Z7X3O28YnpDRe57ofA0O4ebaEptvB8f9upOBmqJyzCwEZsyQctP+Z9vZ9MzqYQLThB0PqNRg5frdLUnUo+bEKDxkKUDqQFAf3SMm8QoC7BqDsi7r2g9iTfEEDhFVpXVjfeM3ZAm7erY4iljpv3wAQ9TW8i3dyuVvLX6lsHeMxLNhBRPrdv3yR1MxT3g== </div>]]></content>
      
        <categories>
            
            <category> 个人 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> houhou </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
